/**
 * CourtAPI
 * Automate PACER Access
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CourtApi) {
      root.CourtApi = {};
    }
    root.CourtApi.PacerCredentialsApi = factory(root.CourtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * PacerCredentials service.
   * @module api/PacerCredentialsApi
   * @version 0.9.2
   */

  /**
   * Constructs a new PacerCredentialsApi. 
   * @alias module:api/PacerCredentialsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the checkPacerCredentials operation.
     * @callback module:api/PacerCredentialsApi~checkPacerCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Credentials
     * Validate Credentials
     * @param {Object} opts Optional parameters
     * @param {String} opts.pacerUser PACER User Name
     * @param {String} opts.pacerPass PACER Password
     * @param {module:api/PacerCredentialsApi~checkPacerCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.checkPacerCredentials = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'pacer_user': opts['pacerUser'],
        'pacer_pass': opts['pacerPass']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pacer/credentials/validate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCredentials operation.
     * @callback module:api/PacerCredentialsApi~deleteCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Credentials
     * Delete Credentials
     * @param {module:api/PacerCredentialsApi~deleteCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCredentials = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pacer/credentials', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredentials operation.
     * @callback module:api/PacerCredentialsApi~getCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Credentials
     * Get Credentials
     * @param {module:api/PacerCredentialsApi~getCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCredentials = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pacer/credentials', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCredentials operation.
     * @callback module:api/PacerCredentialsApi~saveCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/Update Credentials
     * Create/Update Credentials
     * @param {Object} opts Optional parameters
     * @param {String} opts.pacerUser PACER User Name
     * @param {String} opts.pacerPass PACER Password
     * @param {module:api/PacerCredentialsApi~saveCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveCredentials = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'pacer_user': opts['pacerUser'],
        'pacer_pass': opts['pacerPass']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pacer/credentials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
