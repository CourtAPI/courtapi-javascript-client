/**
 * CourtAPI
 * Automate PACER Access
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2001', 'model/InlineResponse20010', 'model/InlineResponse20011', 'model/InlineResponse20012', 'model/InlineResponse20013', 'model/InlineResponse20014', 'model/InlineResponse20015', 'model/InlineResponse20016', 'model/InlineResponse20017', 'model/InlineResponse20019', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/InlineResponse2006', 'model/InlineResponse2007', 'model/InlineResponse2008', 'model/InlineResponse2009'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2001'), require('../model/InlineResponse20010'), require('../model/InlineResponse20011'), require('../model/InlineResponse20012'), require('../model/InlineResponse20013'), require('../model/InlineResponse20014'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse20017'), require('../model/InlineResponse20019'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/InlineResponse2006'), require('../model/InlineResponse2007'), require('../model/InlineResponse2008'), require('../model/InlineResponse2009'));
  } else {
    // Browser globals (root is window)
    if (!root.CourtApi) {
      root.CourtApi = {};
    }
    root.CourtApi.QueryApi = factory(root.CourtApi.ApiClient, root.CourtApi.InlineResponse2001, root.CourtApi.InlineResponse20010, root.CourtApi.InlineResponse20011, root.CourtApi.InlineResponse20012, root.CourtApi.InlineResponse20013, root.CourtApi.InlineResponse20014, root.CourtApi.InlineResponse20015, root.CourtApi.InlineResponse20016, root.CourtApi.InlineResponse20017, root.CourtApi.InlineResponse20019, root.CourtApi.InlineResponse2002, root.CourtApi.InlineResponse2003, root.CourtApi.InlineResponse2004, root.CourtApi.InlineResponse2005, root.CourtApi.InlineResponse2006, root.CourtApi.InlineResponse2007, root.CourtApi.InlineResponse2008, root.CourtApi.InlineResponse2009);
  }
}(this, function(ApiClient, InlineResponse2001, InlineResponse20010, InlineResponse20011, InlineResponse20012, InlineResponse20013, InlineResponse20014, InlineResponse20015, InlineResponse20016, InlineResponse20017, InlineResponse20019, InlineResponse2002, InlineResponse2003, InlineResponse2004, InlineResponse2005, InlineResponse2006, InlineResponse2007, InlineResponse2008, InlineResponse2009) {
  'use strict';

  /**
   * Query service.
   * @module api/QueryApi
   * @version 0.9.2
   */

  /**
   * Constructs a new QueryApi. 
   * @alias module:api/QueryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the buyClaimDocument operation.
     * @callback module:api/QueryApi~buyClaimDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Claim Entry Document from PACER
     * Purchase Claim Entry Document from PACER
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} claimNo Claim Entry Number
     * @param {String} claimSeqNo Claim Entry Document&#39;s Sequence Number
     * @param {String} partNo Document part number
     * @param {module:api/QueryApi~buyClaimDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.buyClaimDocument = function(courtCode, caseNumber, claimNo, claimSeqNo, partNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling buyClaimDocument");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling buyClaimDocument");
      }

      // verify the required parameter 'claimNo' is set
      if (claimNo === undefined || claimNo === null) {
        throw new Error("Missing the required parameter 'claimNo' when calling buyClaimDocument");
      }

      // verify the required parameter 'claimSeqNo' is set
      if (claimSeqNo === undefined || claimSeqNo === null) {
        throw new Error("Missing the required parameter 'claimSeqNo' when calling buyClaimDocument");
      }

      // verify the required parameter 'partNo' is set
      if (partNo === undefined || partNo === null) {
        throw new Error("Missing the required parameter 'partNo' when calling buyClaimDocument");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'claim_no': claimNo,
        'claim_seq_no': claimSeqNo,
        'part_no': partNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims/{claim_no}/documents/{claim_seq_no}/{part_no}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buyDocketDocument operation.
     * @callback module:api/QueryApi~buyDocketDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DocketSelect Order PDF
     * Purchase Order Docket Entry Document From PACER;
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} docketNo Docket Entry Number
     * @param {String} partNo Document part number
     * @param {module:api/QueryApi~buyDocketDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.buyDocketDocument = function(courtCode, caseNumber, docketNo, partNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling buyDocketDocument");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling buyDocketDocument");
      }

      // verify the required parameter 'docketNo' is set
      if (docketNo === undefined || docketNo === null) {
        throw new Error("Missing the required parameter 'docketNo' when calling buyDocketDocument");
      }

      // verify the required parameter 'partNo' is set
      if (partNo === undefined || partNo === null) {
        throw new Error("Missing the required parameter 'partNo' when calling buyDocketDocument");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'docket_no': docketNo,
        'part_no': partNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets/{docket_no}/documents/{part_no}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssociatedCases operation.
     * @callback module:api/QueryApi~updateAssociatedCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Associated Cases
     * PACER Query Case Associated Cases
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateAssociatedCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.updateAssociatedCases = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateAssociatedCases");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateAssociatedCases");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/associated_cases', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAttorneys operation.
     * @callback module:api/QueryApi~updateAttorneysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Attorneys
     * PACER Query Case Attorneys
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateAttorneysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.updateAttorneys = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateAttorneys");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateAttorneys");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/attorneys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCaseFileLocation operation.
     * @callback module:api/QueryApi~updateCaseFileLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case File Location
     * PACER Query Case File Location
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateCaseFileLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    this.updateCaseFileLocation = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateCaseFileLocation");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateCaseFileLocation");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/case_file_location', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCaseSummary operation.
     * @callback module:api/QueryApi~updateCaseSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Summary
     * PACER Query Case Summary
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateCaseSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    this.updateCaseSummary = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateCaseSummary");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateCaseSummary");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/case_summary', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClaimParts operation.
     * @callback module:api/QueryApi~updateClaimPartsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Claim Entry Document Parts from PACER
     * Purchase Claim Entry Document Parts from PACER
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} claimNo Claim Entry Number
     * @param {String} claimSeqNo Claim Entry Document&#39;s Sequence Number
     * @param {module:api/QueryApi~updateClaimPartsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateClaimParts = function(courtCode, caseNumber, claimNo, claimSeqNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateClaimParts");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateClaimParts");
      }

      // verify the required parameter 'claimNo' is set
      if (claimNo === undefined || claimNo === null) {
        throw new Error("Missing the required parameter 'claimNo' when calling updateClaimParts");
      }

      // verify the required parameter 'claimSeqNo' is set
      if (claimSeqNo === undefined || claimSeqNo === null) {
        throw new Error("Missing the required parameter 'claimSeqNo' when calling updateClaimParts");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'claim_no': claimNo,
        'claim_seq_no': claimSeqNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims/{claim_no}/documents/{claim_seq_no}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClaims operation.
     * @callback module:api/QueryApi~updateClaimsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Claims
     * PACER Query Case Claims
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.caseCode 
     * @param {String} opts.creditorType 
     * @param {Number} opts.creditorNo 
     * @param {String} opts.creditorName 
     * @param {String} opts.dateType 
     * @param {String} opts.dateFrom 
     * @param {String} opts.dateTo 
     * @param {Number} opts.docFrom 
     * @param {Number} opts.docTo 
     * @param {module:api/QueryApi~updateClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20019}
     */
    this.updateClaims = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateClaims");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateClaims");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'case_code': opts['caseCode'],
        'creditor_type': opts['creditorType'],
        'creditor_no': opts['creditorNo'],
        'creditor_name': opts['creditorName'],
        'date_type': opts['dateType'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'doc_from': opts['docFrom'],
        'doc_to': opts['docTo']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCreditorMailingMatrix operation.
     * @callback module:api/QueryApi~updateCreditorMailingMatrixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Creditor Mailing
     * PACER Query Case Creditor Mailing
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.caseCode 
     * @param {module:model/String} opts.format 
     * @param {module:api/QueryApi~updateCreditorMailingMatrixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.updateCreditorMailingMatrix = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateCreditorMailingMatrix");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateCreditorMailingMatrix");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'case_code': opts['caseCode'],
        'format': opts['format']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/creditor_mailing', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCreditors operation.
     * @callback module:api/QueryApi~updateCreditorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Creditors
     * PACER Query Case Creditors
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.creditorType 
     * @param {module:api/QueryApi~updateCreditorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.updateCreditors = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateCreditors");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateCreditors");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'creditor_type': opts['creditorType']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/creditors', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocketDocuments operation.
     * @callback module:api/QueryApi~updateDocketDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DocumentSelect Documents
     * Purchase Docket Entry Document Parts from PACER
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} docketNo Docket Entry Number
     * @param {module:api/QueryApi~updateDocketDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDocketDocuments = function(courtCode, caseNumber, docketNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateDocketDocuments");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateDocketDocuments");
      }

      // verify the required parameter 'docketNo' is set
      if (docketNo === undefined || docketNo === null) {
        throw new Error("Missing the required parameter 'docketNo' when calling updateDocketDocuments");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'docket_no': docketNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets/{docket_no}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDockets operation.
     * @callback module:api/QueryApi~updateDocketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Dockets
     * PACER Query Case Dockets
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.caseNumber2 
     * @param {String} opts.dateFrom 
     * @param {String} opts.dateTo 
     * @param {Number} opts.docFrom 
     * @param {Number} opts.docTo 
     * @param {Boolean} opts.minimizeHeader 
     * @param {module:api/QueryApi~updateDocketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    this.updateDockets = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateDockets");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateDockets");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'case_number': opts['caseNumber2'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'doc_from': opts['docFrom'],
        'doc_to': opts['docTo'],
        'minimize_header': opts['minimizeHeader']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFilers operation.
     * @callback module:api/QueryApi~updateFilersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Filers
     * PACER Query Case Filers
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateFilersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.updateFilers = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateFilers");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateFilers");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/filers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHistory operation.
     * @callback module:api/QueryApi~updateHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case History
     * PACER Query Case History
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.historyType 
     * @param {module:model/String} opts.sort 
     * @param {Boolean} opts.showDocket 
     * @param {module:api/QueryApi~updateHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    this.updateHistory = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateHistory");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateHistory");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'history_type': opts['historyType'],
        'sort': opts['sort'],
        'show_docket': opts['showDocket']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/history', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenu operation.
     * @callback module:api/QueryApi~updateMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Menu
     * PACER Query Case Menu
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.updateMenu = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateMenu");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateMenu");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/menu', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotice operation.
     * @callback module:api/QueryApi~updateNoticeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Notice
     * PACER Query Case Notice
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateNoticeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.updateNotice = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateNotice");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateNotice");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/notice', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParties operation.
     * @callback module:api/QueryApi~updatePartiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Parties
     * PACER Query Case Parties
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updatePartiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    this.updateParties = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateParties");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateParties");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/parties', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePartyAliases operation.
     * @callback module:api/QueryApi~updatePartyAliasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Alias
     * PACER Query Case Alias
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updatePartyAliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    this.updatePartyAliases = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updatePartyAliases");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updatePartyAliases");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/alias', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePendingStatus operation.
     * @callback module:api/QueryApi~updatePendingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Status Pending
     * PACER Query Case Status Pending
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updatePendingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    this.updatePendingStatus = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updatePendingStatus");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updatePendingStatus");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/status_pending', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRelatedTransactions operation.
     * @callback module:api/QueryApi~updateRelatedTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Related Transactions
     * PACER Query Case Related Transactions
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {Number} opts.docFrom 
     * @param {Number} opts.docTo 
     * @param {String} opts.dataFiledFrom 
     * @param {String} opts.dataFiledTo 
     * @param {Boolean} opts.showPending 
     * @param {Boolean} opts.showTerminated 
     * @param {module:model/String} opts.sort 
     * @param {module:api/QueryApi~updateRelatedTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20015}
     */
    this.updateRelatedTransactions = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateRelatedTransactions");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateRelatedTransactions");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'doc_from': opts['docFrom'],
        'doc_to': opts['docTo'],
        'data_filed_from': opts['dataFiledFrom'],
        'data_filed_to': opts['dataFiledTo'],
        'show_pending': opts['showPending'],
        'show_terminated': opts['showTerminated'],
        'sort': opts['sort']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/related_transactions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSchedule operation.
     * @callback module:api/QueryApi~updateScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Schedule
     * PACER Query Case Schedule
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    this.updateSchedule = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateSchedule");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateSchedule");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/schedule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrustees operation.
     * @callback module:api/QueryApi~updateTrusteesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER Query Case Trustees
     * PACER Query Case Trustees
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/QueryApi~updateTrusteesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    this.updateTrustees = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling updateTrustees");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling updateTrustees");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/trustees', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
