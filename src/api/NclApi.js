/**
 * CourtAPI
 * Automate PACER Access
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.CourtApi) {
      root.CourtApi = {};
    }
    root.CourtApi.NclApi = factory(root.CourtApi.ApiClient, root.CourtApi.InlineResponse200);
  }
}(this, function(ApiClient, InlineResponse200) {
  'use strict';

  /**
   * Ncl service.
   * @module api/NclApi
   * @version 0.9.2
   */

  /**
   * Constructs a new NclApi. 
   * @alias module:api/NclApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAppellateSearchResults operation.
     * @callback module:api/NclApi~getAppellateSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Appellate Case Search Result Navigation
     * PACER limits NCL results to about 50 cases per page. Use this endpoint to navigate search results by paging and sorting.
     * @param {String} searchId 
     * @param {String} pageNo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField 
     * @param {Boolean} opts.sortReverse 
     * @param {module:api/NclApi~getAppellateSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getAppellateSearchResults = function(searchId, pageNo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling getAppellateSearchResults");
      }

      // verify the required parameter 'pageNo' is set
      if (pageNo === undefined || pageNo === null) {
        throw new Error("Missing the required parameter 'pageNo' when calling getAppellateSearchResults");
      }


      var pathParams = {
        'search_id': searchId
      };
      var queryParams = {
        'page_no': pageNo,
        'sort_field': opts['sortField'],
        'sort_reverse': opts['sortReverse'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/appellate/{search_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankruptcySearchResults operation.
     * @callback module:api/NclApi~getBankruptcySearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Bankruptcy Case Search Result Navigation
     * PACER limits NCL results to about 50 cases per page. Use this endpoint to navigate search results by paging and sorting.
     * @param {String} searchId 
     * @param {String} pageNo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField 
     * @param {Boolean} opts.sortReverse 
     * @param {module:api/NclApi~getBankruptcySearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getBankruptcySearchResults = function(searchId, pageNo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling getBankruptcySearchResults");
      }

      // verify the required parameter 'pageNo' is set
      if (pageNo === undefined || pageNo === null) {
        throw new Error("Missing the required parameter 'pageNo' when calling getBankruptcySearchResults");
      }


      var pathParams = {
        'search_id': searchId
      };
      var queryParams = {
        'page_no': pageNo,
        'sort_field': opts['sortField'],
        'sort_reverse': opts['sortReverse'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/bankruptcy/{search_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCivilSearchResults operation.
     * @callback module:api/NclApi~getCivilSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Civil Case Search Result Navigation
     * PACER limits NCL results to about 50 cases per page. Use this endpoint to navigate search results by paging and sorting.
     * @param {String} searchId 
     * @param {String} pageNo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField 
     * @param {Boolean} opts.sortReverse 
     * @param {module:api/NclApi~getCivilSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getCivilSearchResults = function(searchId, pageNo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling getCivilSearchResults");
      }

      // verify the required parameter 'pageNo' is set
      if (pageNo === undefined || pageNo === null) {
        throw new Error("Missing the required parameter 'pageNo' when calling getCivilSearchResults");
      }


      var pathParams = {
        'search_id': searchId
      };
      var queryParams = {
        'page_no': pageNo,
        'sort_field': opts['sortField'],
        'sort_reverse': opts['sortReverse'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/civil/{search_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCriminalSearchResults operation.
     * @callback module:api/NclApi~getCriminalSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Criminal Case Search Result Navigation
     * PACER limits NCL results to about 50 cases per page. Use this endpoint to navigate search results by paging and sorting.
     * @param {String} searchId 
     * @param {String} pageNo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField 
     * @param {Boolean} opts.sortReverse 
     * @param {module:api/NclApi~getCriminalSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getCriminalSearchResults = function(searchId, pageNo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling getCriminalSearchResults");
      }

      // verify the required parameter 'pageNo' is set
      if (pageNo === undefined || pageNo === null) {
        throw new Error("Missing the required parameter 'pageNo' when calling getCriminalSearchResults");
      }


      var pathParams = {
        'search_id': searchId
      };
      var queryParams = {
        'page_no': pageNo,
        'sort_field': opts['sortField'],
        'sort_reverse': opts['sortReverse'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/criminal/{search_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMDLSearchResults operation.
     * @callback module:api/NclApi~getMDLSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL MDL Case Search Result Navigation
     * PACER limits NCL results to about 50 cases per page. Use this endpoint to navigate search results by paging and sorting.
     * @param {String} searchId 
     * @param {String} pageNo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField 
     * @param {Boolean} opts.sortReverse 
     * @param {module:api/NclApi~getMDLSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getMDLSearchResults = function(searchId, pageNo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling getMDLSearchResults");
      }

      // verify the required parameter 'pageNo' is set
      if (pageNo === undefined || pageNo === null) {
        throw new Error("Missing the required parameter 'pageNo' when calling getMDLSearchResults");
      }


      var pathParams = {
        'search_id': searchId
      };
      var queryParams = {
        'page_no': pageNo,
        'sort_field': opts['sortField'],
        'sort_reverse': opts['sortReverse'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/mdl/{search_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAppellateCases operation.
     * @callback module:api/NclApi~searchAppellateCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Appellate Case Search
     * PACER NCL Appellate Case Search
     * @param {Object} opts Optional parameters
     * @param {String} opts.courtId 
     * @param {String} opts.caseNo 
     * @param {String} opts.caseTitle 
     * @param {String} opts.nos 
     * @param {String} opts.filedFrom 
     * @param {String} opts.filedTo 
     * @param {String} opts.closedFrom 
     * @param {String} opts.closedTo 
     * @param {String} opts.partyName 
     * @param {Boolean} opts.partyExact 
     * @param {module:api/NclApi~searchAppellateCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.searchAppellateCases = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'court_id': opts['courtId'],
        'case_no': opts['caseNo'],
        'case_title': opts['caseTitle'],
        'nos': opts['nos'],
        'filed_from': opts['filedFrom'],
        'filed_to': opts['filedTo'],
        'closed_from': opts['closedFrom'],
        'closed_to': opts['closedTo'],
        'party_name': opts['partyName'],
        'party_exact': opts['partyExact']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/appellate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchBankruptcyCases operation.
     * @callback module:api/NclApi~searchBankruptcyCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Bankruptcy Case Search
     * PACER NCL Bankruptcy Case Search
     * @param {Object} opts Optional parameters
     * @param {String} opts.courtId 
     * @param {Array.<String>} opts.chapter 
     * @param {String} opts.caseNo 
     * @param {String} opts.caseTitle 
     * @param {String} opts.filedFrom 
     * @param {String} opts.filedTo 
     * @param {String} opts.closedFrom 
     * @param {String} opts.closedTo 
     * @param {String} opts.dismissedFrom 
     * @param {String} opts.dismissedTo 
     * @param {String} opts.dischargedFrom 
     * @param {String} opts.dischargedTo 
     * @param {String} opts.partyName 
     * @param {Boolean} opts.partyExact 
     * @param {String} opts.ssn4 
     * @param {String} opts.ssntin 
     * @param {module:api/NclApi~searchBankruptcyCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.searchBankruptcyCases = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'court_id': opts['courtId'],
        'chapter': this.apiClient.buildCollectionParam(opts['chapter'], 'csv'),
        'case_no': opts['caseNo'],
        'case_title': opts['caseTitle'],
        'filed_from': opts['filedFrom'],
        'filed_to': opts['filedTo'],
        'closed_from': opts['closedFrom'],
        'closed_to': opts['closedTo'],
        'dismissed_from': opts['dismissedFrom'],
        'dismissed_to': opts['dismissedTo'],
        'discharged_from': opts['dischargedFrom'],
        'discharged_to': opts['dischargedTo'],
        'party_name': opts['partyName'],
        'party_exact': opts['partyExact'],
        'ssn4': opts['ssn4'],
        'ssntin': opts['ssntin']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/bankruptcy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCivilCases operation.
     * @callback module:api/NclApi~searchCivilCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Civil Case Search
     * PACER NCL Civil Case Search
     * @param {Object} opts Optional parameters
     * @param {String} opts.courtId 
     * @param {String} opts.caseNo 
     * @param {String} opts.caseTitle 
     * @param {String} opts.nos 
     * @param {String} opts.filedFrom 
     * @param {String} opts.filedTo 
     * @param {String} opts.closedFrom 
     * @param {String} opts.closedTo 
     * @param {String} opts.partyName 
     * @param {Boolean} opts.partyExact 
     * @param {module:api/NclApi~searchCivilCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.searchCivilCases = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'court_id': opts['courtId'],
        'case_no': opts['caseNo'],
        'case_title': opts['caseTitle'],
        'nos': opts['nos'],
        'filed_from': opts['filedFrom'],
        'filed_to': opts['filedTo'],
        'closed_from': opts['closedFrom'],
        'closed_to': opts['closedTo'],
        'party_name': opts['partyName'],
        'party_exact': opts['partyExact']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/civil', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCriminalCases operation.
     * @callback module:api/NclApi~searchCriminalCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL Criminal Case Search
     * PACER NCL Criminal Case Search
     * @param {Object} opts Optional parameters
     * @param {String} opts.courtId 
     * @param {String} opts.caseNo 
     * @param {String} opts.caseTitle 
     * @param {String} opts.filedFrom 
     * @param {String} opts.filedTo 
     * @param {String} opts.closedFrom 
     * @param {String} opts.closedTo 
     * @param {String} opts.partyName 
     * @param {Boolean} opts.partyExact 
     * @param {module:api/NclApi~searchCriminalCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.searchCriminalCases = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'court_id': opts['courtId'],
        'case_no': opts['caseNo'],
        'case_title': opts['caseTitle'],
        'filed_from': opts['filedFrom'],
        'filed_to': opts['filedTo'],
        'closed_from': opts['closedFrom'],
        'closed_to': opts['closedTo'],
        'party_name': opts['partyName'],
        'party_exact': opts['partyExact']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/criminal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchMDLCases operation.
     * @callback module:api/NclApi~searchMDLCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PACER NCL MDL Case Search
     * PACER NCL MDL Case Search
     * @param {Object} opts Optional parameters
     * @param {String} opts.courtId 
     * @param {String} opts.mdlId 
     * @param {String} opts.caseNo 
     * @param {String} opts.caseTitle 
     * @param {String} opts.filedFrom 
     * @param {String} opts.filedTo 
     * @param {String} opts.closedFrom 
     * @param {String} opts.closedTo 
     * @param {String} opts.partyName 
     * @param {Boolean} opts.partyExact 
     * @param {module:api/NclApi~searchMDLCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.searchMDLCases = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'court_id': opts['courtId'],
        'mdl_id': opts['mdlId'],
        'case_no': opts['caseNo'],
        'case_title': opts['caseTitle'],
        'filed_from': opts['filedFrom'],
        'filed_to': opts['filedTo'],
        'closed_from': opts['closedFrom'],
        'closed_to': opts['closedTo'],
        'party_name': opts['partyName'],
        'party_exact': opts['partyExact']
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/pacer/ncl/mdl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
