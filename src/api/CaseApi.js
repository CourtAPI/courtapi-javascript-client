/**
 * CourtAPI
 * Automate PACER Access
 *
 * OpenAPI spec version: 0.9.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20018', 'model/InlineResponse20020'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20018'), require('../model/InlineResponse20020'));
  } else {
    // Browser globals (root is window)
    if (!root.CourtApi) {
      root.CourtApi = {};
    }
    root.CourtApi.CaseApi = factory(root.CourtApi.ApiClient, root.CourtApi.InlineResponse20018, root.CourtApi.InlineResponse20020);
  }
}(this, function(ApiClient, InlineResponse20018, InlineResponse20020) {
  'use strict';

  /**
   * Case service.
   * @module api/CaseApi
   * @version 0.9.2
   */

  /**
   * Constructs a new CaseApi. 
   * @alias module:api/CaseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberAliasGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberAliasGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parties with alias for case
     * Parties with alias for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberAliasGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberAliasGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberAliasGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberAliasGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/alias', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberAssociatedCasesGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberAssociatedCasesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cases related to the case or lead case
     * Cases related to the case or lead case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberAssociatedCasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberAssociatedCasesGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberAssociatedCasesGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberAssociatedCasesGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/associated_cases', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberAttorneysGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberAttorneysGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attorney personal info as well as the party(s) they represent
     * Attorney personal info as well as the party(s) they represent
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberAttorneysGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberAttorneysGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberAttorneysGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberAttorneysGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/attorneys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberCaseSummaryGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberCaseSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case summary for case
     * Case summary for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberCaseSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberCaseSummaryGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberCaseSummaryGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberCaseSummaryGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/case_summary', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberCreditorMailingGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberCreditorMailingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creditor mailing matrix for case
     * Creditor mailing matrix for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberCreditorMailingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberCreditorMailingGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberCreditorMailingGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberCreditorMailingGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/creditor_mailing', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberCreditorsGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberCreditorsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All creditors for case
     * All creditors for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberCreditorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberCreditorsGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberCreditorsGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberCreditorsGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/creditors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberFilersGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberFilersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All filers for case
     * All filers for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberFilersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberFilersGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberFilersGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberFilersGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/filers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberMenuGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberMenuGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available menus in PACER for case
     * Available menus in PACER for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberMenuGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberMenuGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberMenuGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberMenuGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/menu', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberNoticeGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberNoticeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Notice of Bankruptcy Filings
     * Case Notice of Bankruptcy Filings
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberNoticeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberNoticeGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberNoticeGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberNoticeGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/notice', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberPartiesGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberPartiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All parties for case
     * All parties for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberPartiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberPartiesGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberPartiesGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberPartiesGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/parties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberScheduleGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberScheduleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule for case
     * Schedule for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberScheduleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberScheduleGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberScheduleGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberScheduleGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/schedule', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberStatusPendingGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberStatusPendingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pending status for case
     * Pending status for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberStatusPendingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberStatusPendingGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberStatusPendingGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberStatusPendingGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/status_pending', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPacerCourtCodeCaseNumberTrusteesGet operation.
     * @callback module:api/CaseApi~casesPacerCourtCodeCaseNumberTrusteesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trustees for case
     * Trustees for case
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~casesPacerCourtCodeCaseNumberTrusteesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesPacerCourtCodeCaseNumberTrusteesGet = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling casesPacerCourtCodeCaseNumberTrusteesGet");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling casesPacerCourtCodeCaseNumberTrusteesGet");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/trustees', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseMenu operation.
     * @callback module:api/CaseApi~getCaseMenuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Root Menu
     * Case Root Menu
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~getCaseMenuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCaseMenu = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getCaseMenu");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getCaseMenu");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClaim operation.
     * @callback module:api/CaseApi~getClaimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Claim Entry
     * Case Claim Entry
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} claimNo Claim Number
     * @param {module:api/CaseApi~getClaimCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getClaim = function(courtCode, caseNumber, claimNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getClaim");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getClaim");
      }

      // verify the required parameter 'claimNo' is set
      if (claimNo === undefined || claimNo === null) {
        throw new Error("Missing the required parameter 'claimNo' when calling getClaim");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'claim_no': claimNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims/{claim_no}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClaimDocument operation.
     * @callback module:api/CaseApi~getClaimDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ClaimSelect Order PDF
     * Order Claim Entry documents;
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} claimNo Claim Entry Number
     * @param {String} claimSeqNo Claim Entry Document&#39;s Sequence Number
     * @param {String} partNo Document part number
     * @param {module:api/CaseApi~getClaimDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getClaimDocument = function(courtCode, caseNumber, claimNo, claimSeqNo, partNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getClaimDocument");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getClaimDocument");
      }

      // verify the required parameter 'claimNo' is set
      if (claimNo === undefined || claimNo === null) {
        throw new Error("Missing the required parameter 'claimNo' when calling getClaimDocument");
      }

      // verify the required parameter 'claimSeqNo' is set
      if (claimSeqNo === undefined || claimSeqNo === null) {
        throw new Error("Missing the required parameter 'claimSeqNo' when calling getClaimDocument");
      }

      // verify the required parameter 'partNo' is set
      if (partNo === undefined || partNo === null) {
        throw new Error("Missing the required parameter 'partNo' when calling getClaimDocument");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'claim_no': claimNo,
        'claim_seq_no': claimSeqNo,
        'part_no': partNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims/{claim_no}/documents/{claim_seq_no}/{part_no}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClaimParts operation.
     * @callback module:api/CaseApi~getClaimPartsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim Entry Document Parts
     * Claim Entry Document Parts
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} claimNo Claim Entry Number
     * @param {String} claimSeqNo Claim Entry Document&#39;s Sequence Number
     * @param {module:api/CaseApi~getClaimPartsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getClaimParts = function(courtCode, caseNumber, claimNo, claimSeqNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getClaimParts");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getClaimParts");
      }

      // verify the required parameter 'claimNo' is set
      if (claimNo === undefined || claimNo === null) {
        throw new Error("Missing the required parameter 'claimNo' when calling getClaimParts");
      }

      // verify the required parameter 'claimSeqNo' is set
      if (claimSeqNo === undefined || claimSeqNo === null) {
        throw new Error("Missing the required parameter 'claimSeqNo' when calling getClaimParts");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'claim_no': claimNo,
        'claim_seq_no': claimSeqNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims/{claim_no}/documents/{claim_seq_no}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClaims operation.
     * @callback module:api/CaseApi~getClaimsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Claims from Local DB
     * Search Case Claim from Local DB
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchKeyword 
     * @param {String} opts.dateFiledFrom 
     * @param {String} opts.dateFiledTo 
     * @param {Number} opts.numberFrom 
     * @param {Number} opts.numberTo 
     * @param {String} opts.numberRange 
     * @param {String} opts.sortColumn 
     * @param {module:model/String} opts.sortOrder 
     * @param {Number} opts.pageSize 
     * @param {Number} opts.pageNumber 
     * @param {module:api/CaseApi~getClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    this.getClaims = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getClaims");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getClaims");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
        'search_keyword': opts['searchKeyword'],
        'date_filed_from': opts['dateFiledFrom'],
        'date_filed_to': opts['dateFiledTo'],
        'number_from': opts['numberFrom'],
        'number_to': opts['numberTo'],
        'number_range': opts['numberRange'],
        'sort_column': opts['sortColumn'],
        'sort_order': opts['sortOrder'],
        'page_size': opts['pageSize'],
        'page_number': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClaimsHeader operation.
     * @callback module:api/CaseApi~getClaimsHeaderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Claims Header
     * Case Claims Header
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~getClaimsHeaderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getClaimsHeader = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getClaimsHeader");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getClaimsHeader");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/claims/header', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocketDocument operation.
     * @callback module:api/CaseApi~getDocketDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DocketSelect Order PDF
     * Order Docket Entry documents;
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} docketNo Docket Entry Number
     * @param {String} partNo Document part number
     * @param {module:api/CaseApi~getDocketDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDocketDocument = function(courtCode, caseNumber, docketNo, partNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getDocketDocument");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getDocketDocument");
      }

      // verify the required parameter 'docketNo' is set
      if (docketNo === undefined || docketNo === null) {
        throw new Error("Missing the required parameter 'docketNo' when calling getDocketDocument");
      }

      // verify the required parameter 'partNo' is set
      if (partNo === undefined || partNo === null) {
        throw new Error("Missing the required parameter 'partNo' when calling getDocketDocument");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'docket_no': docketNo,
        'part_no': partNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets/{docket_no}/documents/{part_no}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocketDocuments operation.
     * @callback module:api/CaseApi~getDocketDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DocumentSelect Documents
     * Docket Entry Document Parts;
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} docketNo Docket Entry Number
     * @param {module:api/CaseApi~getDocketDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDocketDocuments = function(courtCode, caseNumber, docketNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getDocketDocuments");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getDocketDocuments");
      }

      // verify the required parameter 'docketNo' is set
      if (docketNo === undefined || docketNo === null) {
        throw new Error("Missing the required parameter 'docketNo' when calling getDocketDocuments");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'docket_no': docketNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets/{docket_no}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocketEntry operation.
     * @callback module:api/CaseApi~getDocketEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Dockets Entry
     * Case Dockets Entry
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {String} docketNo Docket Sequence Number
     * @param {module:api/CaseApi~getDocketEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDocketEntry = function(courtCode, caseNumber, docketNo, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getDocketEntry");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getDocketEntry");
      }

      // verify the required parameter 'docketNo' is set
      if (docketNo === undefined || docketNo === null) {
        throw new Error("Missing the required parameter 'docketNo' when calling getDocketEntry");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber,
        'docket_no': docketNo
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets/{docket_no}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocketHeader operation.
     * @callback module:api/CaseApi~getDocketHeaderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Dockets Header
     * Case Dockets Header
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~getDocketHeaderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDocketHeader = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getDocketHeader");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getDocketHeader");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets/header', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDockets operation.
     * @callback module:api/CaseApi~getDocketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Dockets from Local DB
     * Case Dockets from Local DB
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchKeyword 
     * @param {String} opts.dateFiledFrom 
     * @param {String} opts.dateFiledTo 
     * @param {Number} opts.docketNumberFrom 
     * @param {Number} opts.docketNumberTo 
     * @param {String} opts.docketNumberRange 
     * @param {String} opts.sortColumn 
     * @param {module:model/String} opts.sortOrder 
     * @param {Number} opts.pageSize 
     * @param {Number} opts.pageNumber 
     * @param {module:api/CaseApi~getDocketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    this.getDockets = function(courtCode, caseNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getDockets");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getDockets");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
        'search_keyword': opts['searchKeyword'],
        'date_filed_from': opts['dateFiledFrom'],
        'date_filed_to': opts['dateFiledTo'],
        'docket_number_from': opts['docketNumberFrom'],
        'docket_number_to': opts['docketNumberTo'],
        'docket_number_range': opts['docketNumberRange'],
        'sort_column': opts['sortColumn'],
        'sort_order': opts['sortOrder'],
        'page_size': opts['pageSize'],
        'page_number': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/dockets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeaders operation.
     * @callback module:api/CaseApi~getHeadersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Case Headers
     * Case Headers
     * @param {String} courtCode Court Code
     * @param {String} caseNumber Case Number
     * @param {module:api/CaseApi~getHeadersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHeaders = function(courtCode, caseNumber, callback) {
      var postBody = null;

      // verify the required parameter 'courtCode' is set
      if (courtCode === undefined || courtCode === null) {
        throw new Error("Missing the required parameter 'courtCode' when calling getHeaders");
      }

      // verify the required parameter 'caseNumber' is set
      if (caseNumber === undefined || caseNumber === null) {
        throw new Error("Missing the required parameter 'caseNumber' when calling getHeaders");
      }


      var pathParams = {
        'court_code': courtCode,
        'case_number': caseNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['www-authenticate'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/pacer/{court_code}/{case_number}/headers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
